name: Deploy Bot Finance Infrastructure

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'prod'
        type: choice
        options:
          - prod
          - dev

env:
  AWS_REGION: us-east-1
  TF_VAR_environment: ${{ github.event.inputs.environment || 'prod' }}

jobs:
  validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'prod' }}
    
    steps:
    - name: Checkout Infrastructure Code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.6.0"

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Format Check
      working-directory: environments/${{ env.TF_VAR_environment }}
      run: |
        echo "üîç Verificando formato de c√≥digo Terraform..."
        terraform fmt -check -recursive
        echo "‚úÖ Formato de c√≥digo correcto"

    - name: Terraform Init
      working-directory: environments/${{ env.TF_VAR_environment }}
      run: |
        echo "üöÄ Inicializando Terraform..."
        terraform init
        echo "‚úÖ Terraform inicializado correctamente"

    - name: Terraform Validate
      working-directory: environments/${{ env.TF_VAR_environment }}
      run: |
        echo "‚úÖ Validando configuraci√≥n de Terraform..."
        terraform validate
        echo "‚úÖ Configuraci√≥n v√°lida"

    - name: Terraform Plan
      working-directory: environments/${{ env.TF_VAR_environment }}
      run: |
        echo "üìã Generando plan de despliegue..."
        terraform plan -out=tfplan
        echo "‚úÖ Plan generado correctamente"

    - name: Upload Plan Artifact
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan-${{ env.TF_VAR_environment }}
        path: environments/${{ env.TF_VAR_environment }}/tfplan

  deploy:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: validate
    if: github.ref == 'refs/heads/main'
    environment: ${{ github.event.inputs.environment || 'prod' }}
    
    steps:
    - name: Checkout Infrastructure Code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.6.0"
        terraform_wrapper: false

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Download Plan Artifact
      uses: actions/download-artifact@v4
      with:
        name: terraform-plan-${{ env.TF_VAR_environment }}
        path: environments/${{ env.TF_VAR_environment }}

    - name: Terraform Init
      working-directory: environments/${{ env.TF_VAR_environment }}
      run: |
        echo "üöÄ Inicializando Terraform..."
        terraform init
        echo "‚úÖ Terraform inicializado correctamente"

    - name: Terraform Apply
      working-directory: environments/${{ env.TF_VAR_environment }}
      run: |
        echo "üîß Desplegando infraestructura..."
        terraform apply -auto-approve tfplan
        echo "‚úÖ Infraestructura desplegada correctamente"

    - name: Deployment Summary
      run: |
        echo "üéâ ¬°Deployment completado exitosamente!"
        echo "=========================="
        echo "üåç Environment: ${{ env.TF_VAR_environment }}"
        echo "üì¶ Recursos creados seg√∫n la configuraci√≥n en main.tf"
        echo ""
        echo "‚öôÔ∏è Pr√≥ximos pasos:"
        echo "   - Verificar recursos en AWS Console"
        echo "   - Configurar manualmente valores sensibles si es necesario"
        echo "   - Revisar documentaci√≥n en CONFIGURACION_MANUAL.md"

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [validate, deploy]
    if: always()
    
    steps:
    - name: Notify Success
      if: needs.deploy.result == 'success'
      run: |
        echo "‚úÖ Deployment exitoso para environment: ${{ env.TF_VAR_environment }}"
        
    - name: Notify Failure
      if: needs.deploy.result == 'failure'
      run: |
        echo "‚ùå Deployment fall√≥ para environment: ${{ env.TF_VAR_environment }}"
        echo "Revisa los logs para m√°s detalles"
