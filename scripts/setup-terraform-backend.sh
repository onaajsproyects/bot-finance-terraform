#!/bin/bash

# Script para configurar el backend remoto de Terraform
# Este script debe ejecutarse ANTES del primer deployment

set -e

PROFILE=${1:-personal}
ENVIRONMENT=${2:-prod}
REGION=${3:-us-east-1}

# Configuraci√≥n del bucket de state
STATE_BUCKET_NAME="bot-finance-terraform-state"
DYNAMODB_TABLE_NAME="bot-finance-terraform-locks"
PROJECT_NAME="bot-finance"

echo "üèóÔ∏è  Configurando backend remoto de Terraform"
echo "üë§ Perfil AWS: $PROFILE"
echo "üåç Environment: $ENVIRONMENT"
echo "üìç Regi√≥n: $REGION"
echo "ü™£ Bucket de state: $STATE_BUCKET_NAME"
echo "üîí Tabla de locks: $DYNAMODB_TABLE_NAME"
echo ""

# Funci√≥n para mostrar ayuda
show_help() {
    echo "üìñ USO:"
    echo "  $0 [perfil-aws] [environment] [region]"
    echo ""
    echo "üìã PAR√ÅMETROS:"
    echo "  perfil-aws   Perfil AWS a usar (default: personal)"
    echo "  environment  Ambiente (default: prod)"
    echo "  region       Regi√≥n AWS (default: us-east-1)"
    echo ""
    echo "üí° EJEMPLOS:"
    echo "  $0                           # Usar defaults"
    echo "  $0 personal prod us-east-1   # Especificar todos los par√°metros"
    echo "  $0 bot-finance prod          # Usar perfil bot-finance"
}

# Verificar si se pide ayuda
if [[ "$1" == "--help" || "$1" == "-h" ]]; then
    show_help
    exit 0
fi

# Verificar credenciales AWS
echo "üîç Verificando credenciales AWS..."
if ! aws sts get-caller-identity --profile $PROFILE >/dev/null 2>&1; then
    echo "‚ùå Error: No se pudo verificar credenciales para perfil '$PROFILE'"
    echo "Ejecuta: aws configure --profile $PROFILE"
    exit 1
fi

ACCOUNT_ID=$(aws sts get-caller-identity --profile $PROFILE --query Account --output text)
echo "‚úÖ Conectado a cuenta: $ACCOUNT_ID"
echo ""

# Verificar que jq est√° instalado
if ! command -v jq &> /dev/null; then
    echo "‚ùå Error: 'jq' no est√° instalado. Se necesita para procesar respuestas JSON."
    echo "Instalar con: brew install jq (macOS) o apt-get install jq (Ubuntu)"
    exit 1
fi

# Crear bucket para el state de Terraform
echo "ü™£ Configurando bucket de state..."
if aws s3 ls s3://$STATE_BUCKET_NAME --profile $PROFILE >/dev/null 2>&1; then
    echo "‚úÖ Bucket de state ya existe: $STATE_BUCKET_NAME"
else
    echo "üìù Creando bucket de state: $STATE_BUCKET_NAME"
    
    # Crear bucket
    aws s3 mb s3://$STATE_BUCKET_NAME --region $REGION --profile $PROFILE
    
    # Habilitar versionado
    echo "üîÑ Habilitando versionado en bucket de state..."
    aws s3api put-bucket-versioning \
        --bucket $STATE_BUCKET_NAME \
        --versioning-configuration Status=Enabled \
        --profile $PROFILE
    
    # Habilitar cifrado por defecto
    echo "üîê Habilitando cifrado en bucket de state..."
    aws s3api put-bucket-encryption \
        --bucket $STATE_BUCKET_NAME \
        --server-side-encryption-configuration '{
            "Rules": [
                {
                    "ApplyServerSideEncryptionByDefault": {
                        "SSEAlgorithm": "AES256"
                    }
                }
            ]
        }' \
        --profile $PROFILE
    
    # Bloquear acceso p√∫blico
    echo "üö´ Bloqueando acceso p√∫blico al bucket de state..."
    aws s3api put-public-access-block \
        --bucket $STATE_BUCKET_NAME \
        --public-access-block-configuration '{
            "BlockPublicAcls": true,
            "IgnorePublicAcls": true,
            "BlockPublicPolicy": true,
            "RestrictPublicBuckets": true
        }' \
        --profile $PROFILE
    
    echo "‚úÖ Bucket de state creado y configurado: $STATE_BUCKET_NAME"
fi

# Crear tabla DynamoDB para locks de Terraform
echo ""
echo "üîí Configurando tabla de locks..."
if aws dynamodb describe-table --table-name $DYNAMODB_TABLE_NAME --region $REGION --profile $PROFILE >/dev/null 2>&1; then
    echo "‚úÖ Tabla de locks ya existe: $DYNAMODB_TABLE_NAME"
else
    echo "üìù Creando tabla de locks: $DYNAMODB_TABLE_NAME"
    
    aws dynamodb create-table \
        --table-name $DYNAMODB_TABLE_NAME \
        --attribute-definitions AttributeName=LockID,AttributeType=S \
        --key-schema AttributeName=LockID,KeyType=HASH \
        --billing-mode PAY_PER_REQUEST \
        --region $REGION \
        --profile $PROFILE \
        --tags '[
            {
                "Key": "Proyecto",
                "Value": "'$PROJECT_NAME'"
            },
            {
                "Key": "Ambiente",
                "Value": "'$ENVIRONMENT'"
            },
            {
                "Key": "Proposito",
                "Value": "terraform-state-locking"
            }
        ]'
    
    echo "‚è≥ Esperando que la tabla est√© disponible..."
    aws dynamodb wait table-exists \
        --table-name $DYNAMODB_TABLE_NAME \
        --region $REGION \
        --profile $PROFILE
    
    echo "‚úÖ Tabla de locks creada: $DYNAMODB_TABLE_NAME"
fi

echo ""
echo "üéâ ¬°Backend remoto configurado exitosamente!"
echo ""
echo "üìä RESUMEN:"
echo "‚Ä¢ Bucket de state: $STATE_BUCKET_NAME"
echo "‚Ä¢ Tabla de locks: $DYNAMODB_TABLE_NAME"
echo "‚Ä¢ Regi√≥n: $REGION"
echo "‚Ä¢ Account ID: $ACCOUNT_ID"
echo ""
echo "üîß CONFIGURACI√ìN PARA provider.tf:"
echo ""
echo "terraform {"
echo "  backend \"s3\" {"
echo "    bucket         = \"$STATE_BUCKET_NAME\""
echo "    key            = \"$PROJECT_NAME/$ENVIRONMENT/terraform.tfstate\""
echo "    region         = \"$REGION\""
echo "    encrypt        = true"
echo "    dynamodb_table = \"$DYNAMODB_TABLE_NAME\""
echo "  }"
echo "}"
echo ""
echo "üöÄ SIGUIENTES PASOS:"
echo "1. Actualizar environments/$ENVIRONMENT/provider.tf con la configuraci√≥n de arriba"
echo "2. Ejecutar: terraform init (para migrar al nuevo backend)"
echo "3. Confirmar la migraci√≥n cuando Terraform pregunte"
echo "4. Ejecutar el deployment normalmente"
echo ""
echo "üí° NOTA: Una vez configurado el backend remoto, todos los deployments"
echo "   mantendr√°n el estado entre ejecuciones, evitando conflictos."
